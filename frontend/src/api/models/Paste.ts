import { User } from "./User";

export interface Paste {
  title?: string;
  content: string;
  language: PasteLanguage;
  expiresOn: Date;
  isPrivate: boolean;
  createdAt: Date;
  user: User;
  id: string;
}

export enum PasteLanguage {
  oneC = "ONE_C",
  abnf = "ABNF",
  accesslog = "ACCESSLOG",
  actionscript = "ACTIONSCRIPT",
  ada = "ADA",
  angelscript = "ANGELSCRIPT",
  apache = "APACHE",
  applescript = "APPLESCRIPT",
  arcade = "ARCADE",
  arduino = "ARDUINO",
  armasm = "ARMASM",
  asciidoc = "ASCIIDOC",
  aspectj = "ASPECTJ",
  autohotkey = "AUTOHOTKEY",
  autoit = "AUTOIT",
  avrasm = "AVRASM",
  awk = "AWK",
  axapta = "AXAPTA",
  bash = "BASH",
  basic = "BASIC",
  bnf = "BNF",
  brainfuck = "BRAINFUCK",
  cLike = "C_LIKE",
  c = "C",
  cal = "CAL",
  capnproto = "CAPNPROTO",
  ceylon = "CEYLON",
  clean = "CLEAN",
  clojureRepl = "CLOJURE_REPL",
  clojure = "CLOJURE",
  cmake = "CMAKE",
  coffeescript = "COFFEESCRIPT",
  coq = "COQ",
  cos = "COS",
  cpp = "CPP",
  crmsh = "CRMSH",
  crystal = "CRYSTAL",
  csharp = "CSHARP",
  csp = "CSP",
  css = "CSS",
  d = "D",
  dart = "DART",
  delphi = "DELPHI",
  diff = "DIFF",
  django = "DJANGO",
  dns = "DNS",
  dockerfile = "DOCKERFILE",
  dos = "DOS",
  dsconfig = "DSCONFIG",
  dts = "DTS",
  dust = "DUST",
  ebnf = "EBNF",
  elixir = "ELIXIR",
  elm = "ELM",
  erb = "ERB",
  erlangRepl = "ERLANG_REPL",
  erlang = "ERLANG",
  excel = "EXCEL",
  fix = "FIX",
  flix = "FLIX",
  fortran = "FORTRAN",
  fsharp = "FSHARP",
  gams = "GAMS",
  gauss = "GAUSS",
  gcode = "GCODE",
  gherkin = "GHERKIN",
  glsl = "GLSL",
  gml = "GML",
  go = "GO",
  golo = "GOLO",
  gradle = "GRADLE",
  groovy = "GROOVY",
  haml = "HAML",
  handlebars = "HANDLEBARS",
  haskell = "HASKELL",
  haxe = "HAXE",
  hsp = "HSP",
  htmlbars = "HTMLBARS",
  http = "HTTP",
  hy = "HY",
  inform7 = "INFORM7",
  ini = "INI",
  irpf90 = "IRPF90",
  isbl = "ISBL",
  java = "JAVA",
  javascript = "JAVASCRIPT",
  jbossCli = "JBOSS_CLI",
  json = "JSON",
  juliaRepl = "JULIA_REPL",
  julia = "JULIA",
  kotlin = "KOTLIN",
  lasso = "LASSO",
  latex = "LATEX",
  ldif = "LDIF",
  leaf = "LEAF",
  less = "LESS",
  lisp = "LISP",
  livecodeserver = "LIVECODESERVER",
  livescript = "LIVESCRIPT",
  llvm = "LLVM",
  lsl = "LSL",
  lua = "LUA",
  makefile = "MAKEFILE",
  markdown = "MARKDOWN",
  mathematica = "MATHEMATICA",
  matlab = "MATLAB",
  maxima = "MAXIMA",
  mel = "MEL",
  mercury = "MERCURY",
  mipsasm = "MIPSASM",
  mizar = "MIZAR",
  mojolicious = "MOJOLICIOUS",
  monkey = "MONKEY",
  moonscript = "MOONSCRIPT",
  n1ql = "N1QL",
  nginx = "NGINX",
  nim = "NIM",
  nix = "NIX",
  nodeRepl = "NODE_REPL",
  nsis = "NSIS",
  objectivec = "OBJECTIVEC",
  ocaml = "OCAML",
  openscad = "OPENSCAD",
  oxygene = "OXYGENE",
  parser3 = "PARSER3",
  perl = "PERL",
  pf = "PF",
  pgsql = "PGSQL",
  phpTemplate = "PHP_TEMPLATE",
  php = "PHP",
  plaintext = "PLAINTEXT",
  pony = "PONY",
  powershell = "POWERSHELL",
  processing = "PROCESSING",
  profile = "PROFILE",
  prolog = "PROLOG",
  properties = "PROPERTIES",
  protobuf = "PROTOBUF",
  puppet = "PUPPET",
  purebasic = "PUREBASIC",
  pythonRepl = "PYTHON_REPL",
  python = "PYTHON",
  q = "Q",
  qml = "QML",
  r = "R",
  reasonml = "REASONML",
  rib = "RIB",
  roboconf = "ROBOCONF",
  routeros = "ROUTEROS",
  rsl = "RSL",
  ruby = "RUBY",
  ruleslanguage = "RULESLANGUAGE",
  rust = "RUST",
  sas = "SAS",
  scala = "SCALA",
  scheme = "SCHEME",
  scilab = "SCILAB",
  scss = "SCSS",
  shell = "SHELL",
  smali = "SMALI",
  smalltalk = "SMALLTALK",
  sml = "SML",
  sqf = "SQF",
  sql = "SQL",
  sqlMore = "SQL_MORE",
  stan = "STAN",
  stata = "STATA",
  step21 = "STEP21",
  stylus = "STYLUS",
  subunit = "SUBUNIT",
  swift = "SWIFT",
  taggerscript = "TAGGERSCRIPT",
  tap = "TAP",
  tcl = "TCL",
  thrift = "THRIFT",
  tp = "TP",
  twig = "TWIG",
  typescript = "TYPESCRIPT",
  vala = "VALA",
  vbnet = "VBNET",
  vbscriptHtml = "VBSCRIPT_HTML",
  vbscript = "VBSCRIPT",
  verilog = "VERILOG",
  vhdl = "VHDL",
  vim = "VIM",
  x86asm = "X86ASM",
  xl = "XL",
  xml = "XML",
  xquery = "XQUERY",
  yaml = "YAML",
  zephir = "ZEPHIR",
}

export const getEnumKeyByValue = (enumerated: any, value: string) => {
  return Object.keys(enumerated)[Object.values(enumerated).indexOf(value as typeof enumerated)];
};
